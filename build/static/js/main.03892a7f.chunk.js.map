{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","character","reading","meaning","className","CardList","kanjiList","map","aKanji","i","key","kunyomi","onyomi","SearchBox","searchChange","size","type","placeholder","onChange","Scroll","props","console","log","style","overflowY","border","height","children","App","event","setState","searchField","target","value","state","fetch","then","response","json","kanji","this","filteredKanji","filter","includes","toLowerCase","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sJAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCHSC,EAbF,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,QAClC,OACC,yBAAKC,UAAU,yDACd,6BACC,4BAAKH,GACL,2BAAIC,GACJ,2BAAIC,MCeOE,EApBE,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACnB,OACC,6BAEEA,EAAUC,KAAI,SAACC,EAAQC,GACtB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLR,UAAWK,EAAUG,GAAGR,UACxBC,QAASI,EAAUG,GAAGE,QAAQ,IAAIL,EAAUG,GAAGG,OAC/CT,QAASG,EAAUG,GAAGN,eCKbU,EAhBG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEnB,OACC,yBAAKV,UAAU,OACd,2BACAA,UAAU,mCACVW,KAAK,KACLC,KAAK,SACLC,YAAY,4BACZC,SAAWJ,MCACK,EATA,SAACC,GAEf,OADAC,QAAQC,IAAIF,GAEX,yBAAKG,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEN,EAAMO,WCgDKC,G,iBA5Cb,aAAe,IAAD,8BACZ,+CAOFd,aAAe,SAACe,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAPzC,EAAKC,MAAQ,CACX5B,UAAW,GACXyB,YAAa,IAJH,E,iFAYO,IAAD,OAClBI,MAAM,2EACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA9B,GAAS,OAAI,EAAKwB,SAAS,CAACxB,UAAWA,EAAUiC,a,+BAIlD,MAE0BC,KAAKN,MAA/B5B,EAFA,EAEAA,UAAWyB,EAFX,EAEWA,YACZU,EAAgBnC,EAAUoC,QAAO,SAAAH,GACrC,OAAQA,EAAM5B,QAAQgC,SAASZ,IAC1BQ,EAAMtC,UAAU0C,SAASZ,IACzBQ,EAAMpC,QAAQyC,cAAcD,SAASZ,MAG5C,OAAKzB,EAAUuC,OAIT,yBAAKzC,UAAU,OACb,wBAAIA,UAAU,MAAd,0BACA,kBAAC,EAAD,CAAWU,aAAc0B,KAAK1B,eAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUR,UAAWmC,MAPtB,2C,GA9BKK,cCFlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SN4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,iB","file":"static/js/main.03892a7f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = ({character, reading, meaning}) => {\n\treturn(\n\t\t<div className=\"bg-lightest-blue dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\n\t\t\t<div>\n\t\t\t\t<h1>{character}</h1>\n\t\t\t\t<p>{reading}</p>\n\t\t\t\t<p>{meaning}</p>\n\t\t\t</div>\n\t\t</div>\n\n\t);\n}\n\nexport default Card;\n\n// <img alt=\"robots\" src={`https://robohash.org/${character}?200x200`}/>","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ kanjiList }) => {\n\treturn(\t\t\n\t\t<div>\n\t\t\t{\n\t\t\t\tkanjiList.map((aKanji, i) => { \n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\tcharacter={kanjiList[i].character} \n\t\t\t\t\t\treading={kanjiList[i].kunyomi+\" \"+kanjiList[i].onyomi}\n\t\t\t\t\t\tmeaning={kanjiList[i].meaning}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\n\t);\n}\n\nexport default CardList;\n\n// {cardComponent}\n// return <Card character={kanji[i].character} reading={kanji[i].kunyomi+\" \"+kanji[i].onyomi} meaning={kanji[i].meaning} />","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n\n\treturn (\n\t\t<div className=\"pa3\">\n\t\t\t<input \n\t\t\tclassName=\"bg-light-yellow pa3 ba b--green \"\n\t\t\tsize=\"35\"\n\t\t\ttype=\"search\" \n\t\t\tplaceholder=\"Kanji, reading or keyword\"\n\t\t\tonChange= {searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\tconsole.log(props);\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '2px solid black', height: '800px' }}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components//SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n//import { kanjiList } from './kanji';\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      kanjiList: [],\n      searchField: ''\n    }\n  }\n\n  searchChange = (event) => {\n    this.setState({searchField: event.target.value});\n  }\n\n  componentDidMount() {\n    fetch('https://raw.githubusercontent.com/jensechu/kanji/master/data/kanji.json')\n      .then(response => response.json())\n      .then(kanjiList => this.setState({kanjiList: kanjiList.kanji}));\n    //console.log(kanjiList);\n  }\n\n  render() {\n    //console.log('Where are we?',this.state.kanjiList);\n    const {kanjiList, searchField} = this.state;\n    const filteredKanji = kanjiList.filter(kanji => {\n      return (kanji.kunyomi.includes(searchField) \n        || kanji.character.includes(searchField)\n        || kanji.meaning.toLowerCase().includes(searchField))\n    })\n\n    if (!kanjiList.length){\n      return <h1>LOADING</h1>\n    } else {\n        return(\n          <div className='tc '>\n            <h1 className='f1'>Mikes Kanji Dictionary</h1>\n            <SearchBox searchChange={this.searchChange} />\n            <Scroll>\n              <CardList kanjiList={filteredKanji}/>\n            </Scroll>  \n          </div>\n        );\n      }\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\nimport './containers/App.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}